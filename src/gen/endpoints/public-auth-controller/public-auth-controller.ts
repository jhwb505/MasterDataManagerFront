/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  Key
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  Login200,
  LoginBody
} from '../../models';

import { customInstance } from '../../../lib/apiClient';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
export const login = (
    loginBody: LoginBody,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Login200>(
    {url: `/public/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginBody
    },
    options);
  }



export const getLoginMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: LoginBody }): Promise<Login200> => {
    return login(arg, options);
  }
}
export const getLoginMutationKey = () => [`/public/api/auth/login`] as const;

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationError = unknown

export const useLogin = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof login>>, TError, Key, LoginBody, Awaited<ReturnType<typeof login>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLoginMutationKey();
  const swrFn = getLoginMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
