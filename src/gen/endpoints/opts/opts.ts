/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import { customInstance } from '../../../lib/apiClient';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
export const healthGet = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
    {url: `/health`, method: 'GET'
    },
    options);
  }



export const getHealthGetKey = () => [`/health`] as const;

export type HealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthGet>>>
export type HealthGetQueryError = unknown

export const useHealthGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof healthGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHealthGetKey() : null);
  const swrFn = () => healthGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
