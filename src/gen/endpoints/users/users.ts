/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import type {
  GetUsersParams,
  UserResponse
} from '../../models';

import { customInstance } from '../../../lib/apiClient';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * ユーザー情報一覧を取得する
 * @summary ユーザー情報一覧
 */
export const getUsers = (
    params?: GetUsersParams,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UserResponse[]>(
    {url: `/users`, method: 'GET',
        params
    },
    options);
  }



export const getGetUsersKey = (params?: GetUsersParams,) => [`/users`, ...(params ? [params]: [])] as const;

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = void

/**
 * @summary ユーザー情報一覧
 */
export const useGetUsers = <TError = void>(
  params?: GetUsersParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsers>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersKey(params) : null);
  const swrFn = () => getUsers(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
