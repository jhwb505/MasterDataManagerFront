/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  BadRequestError,
  ListTasksParams,
  ResourceNotFoundError,
  TaskDTO,
  TaskForm,
  TaskListDTO
} from '../../models';

import { customInstance } from '../../../lib/apiClient';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * 指定されたIDのタスクを1件取得します
 * @summary タスク取得
 */
export const showTask = (
    taskId: number,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<TaskDTO>(
    {url: `/tasks/${taskId}`, method: 'GET'
    },
    options);
  }



export const getShowTaskKey = (taskId: number,) => [`/tasks/${taskId}`] as const;

export type ShowTaskQueryResult = NonNullable<Awaited<ReturnType<typeof showTask>>>
export type ShowTaskQueryError = ResourceNotFoundError

/**
 * @summary タスク取得
 */
export const useShowTask = <TError = ResourceNotFoundError>(
  taskId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof showTask>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(taskId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getShowTaskKey(taskId) : null);
  const swrFn = () => showTask(taskId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * 指定されたタスクをリクエストボディの内容で上書きします
 * @summary タスク更新
 */
export const editTask = (
    taskId: number,
    taskForm: TaskForm,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<TaskDTO>(
    {url: `/tasks/${taskId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: taskForm
    },
    options);
  }



export const getEditTaskMutationFetcher = (taskId: number, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: TaskForm }): Promise<TaskDTO> => {
    return editTask(taskId, arg, options);
  }
}
export const getEditTaskMutationKey = (taskId: number,) => [`/tasks/${taskId}`] as const;

export type EditTaskMutationResult = NonNullable<Awaited<ReturnType<typeof editTask>>>
export type EditTaskMutationError = BadRequestError | ResourceNotFoundError

/**
 * @summary タスク更新
 */
export const useEditTask = <TError = BadRequestError | ResourceNotFoundError>(
  taskId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof editTask>>, TError, Key, TaskForm, Awaited<ReturnType<typeof editTask>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getEditTaskMutationKey(taskId);
  const swrFn = getEditTaskMutationFetcher(taskId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * 指定されたタスクを削除します
 * @summary タスク削除
 */
export const deleteTask = (
    taskId: number,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
    {url: `/tasks/${taskId}`, method: 'DELETE'
    },
    options);
  }



export const getDeleteTaskMutationFetcher = (taskId: number, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteTask(taskId, options);
  }
}
export const getDeleteTaskMutationKey = (taskId: number,) => [`/tasks/${taskId}`] as const;

export type DeleteTaskMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTask>>>
export type DeleteTaskMutationError = ResourceNotFoundError

/**
 * @summary タスク削除
 */
export const useDeleteTask = <TError = ResourceNotFoundError>(
  taskId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteTask>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteTask>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteTaskMutationKey(taskId);
  const swrFn = getDeleteTaskMutationFetcher(taskId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * タスクの一覧を取得できます
 * @summary タスク一覧取得
 */
export const listTasks = (
    params: ListTasksParams,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<TaskListDTO>(
    {url: `/tasks/`, method: 'GET',
        params
    },
    options);
  }



export const getListTasksKey = (params: ListTasksParams,) => [`/tasks/`, ...(params ? [params]: [])] as const;

export type ListTasksQueryResult = NonNullable<Awaited<ReturnType<typeof listTasks>>>
export type ListTasksQueryError = BadRequestError

/**
 * @summary タスク一覧取得
 */
export const useListTasks = <TError = BadRequestError>(
  params: ListTasksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof listTasks>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getListTasksKey(params) : null);
  const swrFn = () => listTasks(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * タスクを新規作成します
 * @summary タスク作成
 */
export const createTask = (
    taskForm: TaskForm,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<TaskDTO>(
    {url: `/tasks/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: taskForm
    },
    options);
  }



export const getCreateTaskMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: TaskForm }): Promise<TaskDTO> => {
    return createTask(arg, options);
  }
}
export const getCreateTaskMutationKey = () => [`/tasks/`] as const;

export type CreateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof createTask>>>
export type CreateTaskMutationError = BadRequestError

/**
 * @summary タスク作成
 */
export const useCreateTask = <TError = BadRequestError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createTask>>, TError, Key, TaskForm, Awaited<ReturnType<typeof createTask>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateTaskMutationKey();
  const swrFn = getCreateTaskMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
